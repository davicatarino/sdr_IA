import { ResponseTemplate } from '../types';

/**
 * Templates de respostas padronizadas para o agente SDR
 */
export const responseTemplates: ResponseTemplate[] = [
  // Sauda√ß√µes
  {
    id: 'greeting_morning',
    type: 'greeting',
    template: 'Bom dia! üëã Sou seu assistente virtual para agendamento de reuni√µes. Como posso ajud√°-lo hoje?',
    variables: [],
    conditions: {
      timeOfDay: ['morning']
    }
  },
  {
    id: 'greeting_afternoon',
    type: 'greeting',
    template: 'Boa tarde! üëã Sou seu assistente virtual para agendamento de reuni√µes. Como posso ajud√°-lo hoje?',
    variables: [],
    conditions: {
      timeOfDay: ['afternoon']
    }
  },
  {
    id: 'greeting_evening',
    type: 'greeting',
    template: 'Boa noite! üëã Sou seu assistente virtual para agendamento de reuni√µes. Como posso ajud√°-lo hoje?',
    variables: [],
    conditions: {
      timeOfDay: ['evening']
    }
  },

  // Confirma√ß√µes de agendamento
  {
    id: 'schedule_confirmation',
    type: 'confirmation',
    template: 'Perfeito! Vou agendar sua reuni√£o "{summary}" para {date} √†s {time}. Confirma?',
    variables: ['summary', 'date', 'time'],
    conditions: {
      intent: ['schedule']
    }
  },
  {
    id: 'schedule_success',
    type: 'text',
    template: '‚úÖ Reuni√£o agendada com sucesso!\n\nüìÖ {summary}\nüìÖ Data: {date}\n‚è∞ Hor√°rio: {time}\n‚è±Ô∏è Dura√ß√£o: {duration} minutos\n\nVoc√™ receber√° um lembrete 15 minutos antes. Precisa de mais alguma coisa?',
    variables: ['summary', 'date', 'time', 'duration'],
    conditions: {
      intent: ['schedule']
    }
  },

  // Remarca√ß√£o
  {
    id: 'reschedule_confirmation',
    type: 'confirmation',
    template: 'Entendi! Voc√™ quer remarcar a reuni√£o "{summary}" para {newDate} √†s {newTime}. Confirma a altera√ß√£o?',
    variables: ['summary', 'newDate', 'newTime'],
    conditions: {
      intent: ['reschedule']
    }
  },
  {
    id: 'reschedule_success',
    type: 'text',
    template: '‚úÖ Reuni√£o remarcada com sucesso!\n\nüìÖ {summary}\nüìÖ Nova data: {newDate}\n‚è∞ Novo hor√°rio: {newTime}\n\nTodos os participantes foram notificados. Precisa de mais alguma coisa?',
    variables: ['summary', 'newDate', 'newTime'],
    conditions: {
      intent: ['reschedule']
    }
  },

  // Cancelamento
  {
    id: 'cancel_confirmation',
    type: 'confirmation',
    template: 'Tem certeza que deseja cancelar a reuni√£o "{summary}" agendada para {date} √†s {time}?',
    variables: ['summary', 'date', 'time'],
    conditions: {
      intent: ['cancel']
    }
  },
  {
    id: 'cancel_success',
    type: 'text',
    template: '‚úÖ Reuni√£o cancelada com sucesso!\n\nüìÖ {summary}\n‚ùå Cancelada\n\nTodos os participantes foram notificados. Posso ajud√°-lo com mais alguma coisa?',
    variables: ['summary'],
    conditions: {
      intent: ['cancel']
    }
  },

  // Listagem de reuni√µes
  {
    id: 'list_meetings',
    type: 'text',
    template: 'üìã Suas pr√≥ximas reuni√µes:\n\n{meetings}\n\nPrecisa de mais alguma informa√ß√£o?',
    variables: ['meetings'],
    conditions: {
      intent: ['list']
    }
  },

  // Verifica√ß√£o de disponibilidade
  {
    id: 'check_availability',
    type: 'text',
    template: 'üîç Verificando disponibilidade para {date}...\n\n{availability}\n\nGostaria de agendar algum desses hor√°rios?',
    variables: ['date', 'availability'],
    conditions: {
      intent: ['check_availability']
    }
  },

  // Solicita√ß√£o de informa√ß√µes
  {
    id: 'ask_meeting_details',
    type: 'text',
    template: 'Para agendar sua reuni√£o, preciso de algumas informa√ß√µes:\n\nüìù Qual o assunto da reuni√£o?\nüìÖ Qual data voc√™ prefere?\n‚è∞ Qual hor√°rio?\n‚è±Ô∏è Qual a dura√ß√£o estimada?\nüë• H√° outros participantes?',
    variables: [],
    conditions: {
      intent: ['schedule']
    }
  },

  // Hor√°rio fora do comercial
  {
    id: 'outside_business_hours',
    type: 'text',
    template: '‚è∞ Estamos fora do hor√°rio comercial ({start} √†s {end}, dias √∫teis).\n\nDeixe sua mensagem e retornaremos no pr√≥ximo dia √∫til. Para casos urgentes, marque sua mensagem como "urgente".',
    variables: ['start', 'end'],
    conditions: {
      timeOfDay: ['night']
    }
  },

  // Handoff para humano
  {
    id: 'handoff_request',
    type: 'handoff',
    template: 'Entendo sua solicita√ß√£o. Vou transferir voc√™ para um atendente humano que poder√° ajud√°-lo melhor.\n\nüë§ Um atendente entrar√° em contato em breve.\n‚è±Ô∏è Tempo estimado: 5-10 minutos\n\nObrigado pela paci√™ncia! üôè',
    variables: [],
    conditions: {
      intent: ['handoff']
    }
  },

  // Erros
  {
    id: 'error_generic',
    type: 'error',
    template: '‚ùå Desculpe, ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente ou entre em contato com nosso suporte.',
    variables: [],
    conditions: {
      intent: ['error']
    }
  },
  {
    id: 'error_calendar',
    type: 'error',
    template: '‚ùå N√£o consegui acessar o calend√°rio no momento. Tente novamente em alguns minutos ou entre em contato conosco.',
    variables: [],
    conditions: {
      intent: ['error']
    }
  },

  // Despedidas
  {
    id: 'goodbye',
    type: 'text',
    template: 'Obrigado por usar nosso servi√ßo! üòä\n\nSe precisar de mais alguma coisa, √© s√≥ me chamar. Tenha um √≥timo dia! üëã',
    variables: [],
    conditions: {
      intent: ['goodbye']
    }
  }
];

/**
 * Fun√ß√£o para obter template de resposta baseado no contexto
 */
export function getResponseTemplate(
  type: string,
  intent?: string,
  timeOfDay?: string
): ResponseTemplate | null {
  const templates = responseTemplates.filter(template => {
    // Filtra por tipo
    if (template.type !== type) return false;
    
    // Filtra por intent se especificado
    if (intent && template.conditions?.intent && 
        !template.conditions.intent.includes(intent)) {
      return false;
    }
    
    // Filtra por hor√°rio do dia se especificado
    if (timeOfDay && template.conditions?.timeOfDay && 
        !template.conditions.timeOfDay.includes(timeOfDay)) {
      return false;
    }
    
    return true;
  });
  
  return templates.length > 0 ? templates[0] : null;
}

/**
 * Fun√ß√£o para renderizar template com vari√°veis
 */
export function renderTemplate(template: ResponseTemplate, variables: Record<string, string>): string {
  let message = template.template;
  
  // Substitui vari√°veis no template
  for (const [key, value] of Object.entries(variables)) {
    const placeholder = `{${key}}`;
    message = message.replace(new RegExp(placeholder, 'g'), value);
  }
  
  return message;
}

/**
 * Fun√ß√£o para obter hor√°rio do dia
 */
export function getTimeOfDay(): 'morning' | 'afternoon' | 'evening' | 'night' {
  const hour = new Date().getHours();
  
  if (hour >= 5 && hour < 12) return 'morning';
  if (hour >= 12 && hour < 18) return 'afternoon';
  if (hour >= 18 && hour < 22) return 'evening';
  return 'night';
}

/**
 * Fun√ß√£o para formatar lista de reuni√µes
 */
export function formatMeetingsList(meetings: any[]): string {
  if (meetings.length === 0) {
    return 'Nenhuma reuni√£o agendada.';
  }
  
  return meetings.map((meeting, index) => {
    const date = new Date(meeting.start).toLocaleDateString('pt-BR');
    const time = new Date(meeting.start).toLocaleTimeString('pt-BR', {
      hour: '2-digit',
      minute: '2-digit'
    });
    
    return `${index + 1}. ${meeting.summary}\n   üìÖ ${date} √†s ${time}`;
  }).join('\n\n');
}

/**
 * Fun√ß√£o para formatar disponibilidade
 */
export function formatAvailability(availability: any): string {
  if (availability.available) {
    return '‚úÖ Hor√°rio dispon√≠vel!';
  }
  
  if (availability.busyPeriods && availability.busyPeriods.length > 0) {
    const busyTimes = availability.busyPeriods.map((period: any) => {
      const start = new Date(period.start).toLocaleTimeString('pt-BR', {
        hour: '2-digit',
        minute: '2-digit'
      });
      const end = new Date(period.end).toLocaleTimeString('pt-BR', {
        hour: '2-digit',
        minute: '2-digit'
      });
      return `${start} - ${end}`;
    }).join(', ');
    
    return `‚ùå Hor√°rio ocupado\n‚è∞ Per√≠odos ocupados: ${busyTimes}`;
  }
  
  return '‚ùå Hor√°rio n√£o dispon√≠vel';
} 